using System.Collections.Generic;using UnityEngine;namespace DesertImage.Managers{    public class ManagerUpdate : ManagerBase, IAwake    {        #region PRIVATE        private List<ITick> _ticks = new List<ITick>();        private List<ITickFixed> _fixedTicks = new List<ITickFixed>();        private List<ITickLate> _lateTicks = new List<ITickLate>();        private List<ITick> _ticksToAdd = new List<ITick>();        private List<ITickFixed> _fixedTicksToAdd = new List<ITickFixed>();        private List<ITickLate> _lateTicksToAdd = new List<ITickLate>();                #endregion        #region PUBLIC METHODS        public void onAwake()        {            Init();        }        public void add(object updatable)        {            Add(updatable);        }        public void remove(object updatable)        {            Remove(updatable);        }        public void clear()        {            Clear();        }        public void tick()        {            UpdateTicks();        }        public void fixedTick()        {            UpdateFixedTicks();        }        public void lateTick()        {            UpdateLateTicks();        }        #endregion        #region INIT        private void Init()        {            var managersObj = GameObject.Find("Managers");            if (managersObj == null)            {                managersObj = new GameObject("Managers");            }            managersObj.AddComponent<ComponentUpdate>().Setup(this);        }        #endregion        #region UPDATES        private void UpdateTicks()        {            for (var i = 0; i < _ticksToAdd.Count; i++)            {                var t = _ticksToAdd[i];                                if (t == null) continue;                _ticks.Add(t);                _ticksToAdd[i] = null;            }                        _ticksToAdd.Clear();            foreach (var tick in _ticks)            {                if (tick == null) continue;                tick.tick();            }            for (var i = _ticks.Count - 1; i >= 0; i--)            {                if(_ticks[i] != null) continue;                                _ticks.RemoveAt(i);            }        }        private void UpdateFixedTicks()        {            foreach (var fixedTick in _fixedTicks)            {                fixedTick.fixedTick();            }                        for (var i = _fixedTicks.Count - 1; i >= 0; i--)            {                if(_fixedTicks[i] != null) continue;                                _fixedTicks.RemoveAt(i);            }        }        private void UpdateLateTicks()        {            foreach (var lateTick in _lateTicks)            {                lateTick.lateTick();            }                        for (var i = _lateTicks.Count - 1; i >= 0; i--)            {                if(_lateTicks[i] != null) continue;                                _lateTicks.RemoveAt(i);            }        }        #endregion        #region ADD / REMOVE UPDATABLES        private void Add(object updatable)        {            if (updatable is ITick && !_ticks.Contains(updatable as ITick))                _ticksToAdd.Add(updatable as ITick);            if (updatable is ITickFixed && !_fixedTicks.Contains(updatable as ITickFixed))                _fixedTicksToAdd.Add(updatable as ITickFixed);            if (updatable is ITickLate && !_lateTicks.Contains(updatable as ITickLate))                _lateTicksToAdd.Add(updatable as ITickLate);        }        private void Remove(object updatable)        {            var tick = updatable as ITick;            var fixedTick = updatable as ITickFixed;            var lateTick = updatable as ITickLate;            if (_ticks.Contains(tick))                _ticks[_ticks.IndexOf(tick)] = null;            if (_fixedTicks.Contains(fixedTick))                _fixedTicks[_fixedTicks.IndexOf(fixedTick)] = null;            if (_lateTicks.Contains(lateTick))                _lateTicks[_lateTicks.IndexOf(lateTick)] = null;        }        #endregion        private void Clear()        {            for (var i = 0; i < _ticks.Count; i++)            {                _ticks[i] = null;            }                        for (var i = 0; i < _fixedTicks.Count; i++)            {                _fixedTicks[i] = null;            }                        for (var i = 0; i < _lateTicks.Count; i++)            {                _lateTicks[i] = null;            }                        _ticksToAdd.Clear();            _fixedTicksToAdd.Clear();            _lateTicksToAdd.Clear();        }    }}