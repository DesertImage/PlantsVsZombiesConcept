using System;using System.Collections.Generic;using DesertImage.Enums;using DesertImage.Pools;using UnityEngine;namespace DesertImage{    [CreateAssetMenu(fileName = "FactorySpawn", menuName = "Factories/Spawn")]    public class FactorySpawn : Factory, IAwake    {        #region PRIVATE        public List<ObjectsSpawnNode> Nodes;                private PoolGameObject _pool;        #endregion        #region PUBLIC METHODS        public void onAwake()        {            Init();        }        public void registerObjects()        {            RegisterObjects();        }                public GameObject spawn(ObjectsId id)        {            return Spawn(id, Vector3.zero, Quaternion.identity, null);        }        public GameObject spawn(ObjectsId id, Vector3 position)        {            return Spawn(id, position, Quaternion.identity, null);        }        public GameObject spawn(ObjectsId id, Vector3 position, Quaternion rotation,            Transform parent = null)        {            return Spawn(id, position, rotation, parent);        }                public GameObject spawn(ObjectsId id, Transform parent)        {            return Spawn(id, parent);        }                public void returnInstance(GameObject obj, ObjectsId id)        {            ReturnInstance(obj, id);        }                public void returnInstance(GameObject obj, string prefabName)        {            ReturnInstance(obj, prefabName);        }           #endregion        #region INIT        private void Init()        {            _pool =Core.Instance.get<PoolGameObject>();                        RegisterObjects();        }        private void RegisterObjects()        {            if (_pool == null) return;            foreach (var spawnNode in Nodes)            {                _pool.register(spawnNode.Prefab, spawnNode.RegisterCount);            }        }        #endregion        #region SPAWN        private GameObject Spawn(ObjectsId id, Vector3 position, Quaternion rotation, Transform parent)        {            GameObject obj = null;            if (_pool == null) return obj;            foreach (var spawnNode in Nodes)            {                if (spawnNode.Id != id) continue;                obj = _pool.getInstance(spawnNode.Prefab);                obj.transform.localScale = Vector3.one;                obj.transform.position = position;                obj.transform.rotation = rotation;                obj.transform.parent = parent;            }//            Bind(obj, id);                        return obj;        }                private GameObject Spawn(ObjectsId id, Transform parent)        {            GameObject obj = null;            if (_pool == null) return obj;            foreach (var spawnNode in Nodes)            {                if (spawnNode.Id != id) continue;                obj = _pool.getInstance(spawnNode.Prefab);                obj.transform.parent = parent;                obj.transform.localScale = Vector3.one;                obj.transform.localPosition = Vector3.zero;                obj.transform.localRotation = Quaternion.identity;            }//            Bind(obj, id);                        return obj;        }        #endregion        #region RETURN        private void ReturnInstance(GameObject obj, ObjectsId id)        {            obj.SetActive(false);            obj.transform.parent = null;            foreach (var node in Nodes)            {                if (node.Id != id) continue;                                _pool.returnInstance(obj, node.Prefab);            }        }                private void ReturnInstance(GameObject obj, string prefabName)        {            obj.SetActive(false);            obj.transform.parent = null;            foreach (var node in Nodes)            {                if (node.Prefab.name + "(Clone)" != prefabName) continue;                _pool.returnInstance(obj, node.Prefab);                                break;            }        }                #endregion    }    [Serializable]    public class ObjectsSpawnNode    {        [SerializeField] private string _name;        public ObjectsId Id;        public GameObject Prefab;        public int RegisterCount;    }}