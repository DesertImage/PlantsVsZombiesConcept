using System.Collections.Generic;using UnityEngine;namespace DesertImage.Pools{    public abstract class Pool    {    }    public abstract class Pool<T> : Pool    {        #region PRIVATE        protected readonly Dictionary<int, Stack<T>> CachedObjects = new Dictionary<int, Stack<T>>();        #endregion        #region PUBLIC METHODS        public T getInstance(T objInstance)        {            return Get(objInstance);        }        public T getInstance()        {            return Get();        }        public void register(T objInstance, int count = 1)        {            Register(objInstance, count);        }        public void returnInstance(T objInstance)        {            ReturnInstance(objInstance);        }        #endregion        #region REGISTER        private void Register(T objInstance, int count = 1)        {            Stack<T> objStack;            var hash = GetHash(objInstance);            if (!CachedObjects.TryGetValue(hash, out objStack))            {                objStack = new Stack<T>();                CachedObjects.Add(hash, objStack);            }            for (var i = 0; i < count; i++)            {                objStack.Push(CreateInstance(objInstance));                CachedObjects[hash] = objStack;            }        }        #endregion        #region CREATE INSTANCE        protected abstract T CreateInstance(T objInstance);        #endregion        #region GET        protected T Get(T objInstance)        {            var obj = default(T);            Stack<T> objStack;            if (!CachedObjects.TryGetValue(GetHash(objInstance), out objStack)) return obj;            obj = objStack.Count > 0 ? objStack.Pop() : CreateInstance(objInstance);            GetStuff(obj);            return obj;        }        protected T Get()        {            var obj = default(T);            if (CachedObjects.Count == 0) return CreateInstance(obj);            Stack<T> objStack;            if (!CachedObjects.TryGetValue(GetHash(obj), out objStack)) return obj;            if (objStack.Count > 0)            {                obj = objStack.Pop();            }            else            {                obj = CreateInstance(obj);                objStack.Push(obj);            }            GetStuff(obj);            return obj;        }        protected virtual void GetStuff(T objInstance)        {        }        protected virtual int GetHash(T obj)        {            return (typeof(T).GetHashCode());        }        #endregion        #region RETURN        protected virtual void ReturnInstance(T objInstance)        {            Stack<T> objStack;            if (CachedObjects.TryGetValue(GetHash(objInstance), out objStack))            {                objStack.Push(objInstance);            }            ReturnStuff(objInstance);        }        protected virtual void ReturnStuff(T objInstance)        {        }        #endregion    }}